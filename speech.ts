import React, { useState, useEffect } from 'react';
import { ChevronRight, ChevronDown, Code, Zap, Globe, Layers } from 'lucide-react';

interface User {
  id: number;
  name: string;
  email: string;
  username: string;
}

interface TodoItem {
  id: number;
  title: string;
  completed: boolean;
}

// –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const useRouter = () => {
  const [currentRoute, setCurrentRoute] = useState('/');
  
  const navigate = (path: string) => {
    setCurrentRoute(path);
  };
  
  return { currentRoute, navigate };
};

const ReactConceptsGuide = () => {
  const [activeSection, setActiveSection] = useState<string>('components');
  const [users, setUsers] = useState<User[]>([]);
  const [todos, setTodos] = useState<TodoItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [expandedCode, setExpandedCode] = useState<string>('');
  const { currentRoute, navigate } = useRouter();

  // –ü—Ä–∏–º–µ—Ä useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        await new Promise(resolve => setTimeout(resolve, 1000));
        setUsers([
          { id: 1, name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', email: 'ivan@example.com', username: 'ivan_p' },
          { id: 2, name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', email: 'maria@example.com', username: 'maria_s' }
        ]);
        setTodos([
          { id: 1, title: '–ò–∑—É—á–∏—Ç—å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', completed: true },
          { id: 2, title: '–†–∞–∑–æ–±—Ä–∞—Ç—å —Ö—É–∫–∏', completed: false },
          { id: 3, title: '–°–æ–∑–¥–∞—Ç—å SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', completed: false }
        ]);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      } finally {
        setLoading(false);
      }
    };

    if (activeSection === 'api') {
      fetchData();
    }
  }, [activeSection]);

  const sections = [
    { id: 'components', title: 'üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', icon: <Layers className="w-5 h-5" /> },
    { id: 'state', title: 'üì¶ State –∏ —Ö—É–∫–∏', icon: <Zap className="w-5 h-5" /> },
    { id: 'routing', title: 'üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è', icon: <Globe className="w-5 h-5" /> },
    { id: 'api', title: 'üîå REST API', icon: <Code className="w-5 h-5" /> }
  ];

  const toggleCode = (codeId: string) => {
    setExpandedCode(expandedCode === codeId ? '' : codeId);
  };

  const renderComponentsSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-blue-600">üß© React –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
      
      <div className="bg-gray-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-3">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)</h3>
        <button 
          onClick={() => toggleCode('functional')}
          className="flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-2"
        >
          {expandedCode === 'functional' ? <ChevronDown /> : <ChevronRight />}
          –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥
        </button>
        
        {expandedCode === 'functional' && (
          <pre className="bg-gray-800 text-green-300 p-4 rounded text-sm overflow-x-auto">
{`// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å TypeScript
interface UserCardProps {
  name: string;
  email: string;
  isOnline?: boolean; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π prop
}

const UserCard: React.FC<UserCardProps> = ({ name, email, isOnline = false }) => {
  return (
    <div className="border p-4 rounded">
      <h3>{name}</h3>
      <p>{email}</p>
      <span className={\`status \${isOnline ? 'online' : 'offline'}\`}>
        {isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω'}
      </span>
    </div>
  );
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
<UserCard 
  name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤" 
  email="ivan@example.com" 
  isOnline={true} 
/>`}
          </pre>
        )}
      </div>

      <div className="bg-yellow-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">üìù –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:</h3>
        <ul className="list-disc list-inside space-y-1 text-sm">
          <li><strong>Props</strong> - –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</li>
          <li><strong>TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã</strong> - —Ç–∏–ø–∏–∑–∞—Ü–∏—è props –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
          <li><strong>–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è</strong> - —É–¥–æ–±–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ props</li>
          <li><strong>–£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥</strong> - –ø–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —É—Å–ª–æ–≤–∏—é</li>
          <li><strong>React.FC</strong> - —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</li>
        </ul>
      </div>
    </div>
  );

  const renderStateSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-green-600">üì¶ State –∏ React —Ö—É–∫–∏</h2>
      
      <div className="grid md:grid-cols-2 gap-4">
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-3">useState - –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
          <div className="space-y-2">
            <p className="text-sm">–°—á–µ—Ç—á–∏–∫: <span className="font-bold text-lg">{users.length}</span></p>
            <button 
              onClick={() => setUsers([...users, { 
                id: Date.now(), 
                name: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
                email: 'new@example.com', 
                username: 'new_user' 
              }])}
              className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600"
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </button>
          </div>
        </div>

        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-3">useEffect - –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</h3>
          <p className="text-sm mb-2">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ–∫—Ü–∏–∏</p>
          {loading && <div className="text-blue-600">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>}
        </div>
      </div>

      <button 
        onClick={() => toggleCode('hooks')}
        className="flex items-center gap-2 text-green-600 hover:text-green-800"
      >
        {expandedCode === 'hooks' ? <ChevronDown /> : <ChevronRight />}
        –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ —Ö—É–∫–æ–≤
      </button>
      
      {expandedCode === 'hooks' && (
        <pre className="bg-gray-800 text-green-300 p-4 rounded text-sm overflow-x-auto">
{`// useState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
const [count, setCount] = useState<number>(0);
const [users, setUsers] = useState<User[]>([]);
const [loading, setLoading] = useState<boolean>(false);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
setCount(prev => prev + 1); // —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
setUsers([...users, newUser]); // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤

// useEffect –¥–ª—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
useEffect(() => {
  // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è');
  
  // Cleanup —Ñ—É–Ω–∫—Ü–∏—è (–∞–Ω–∞–ª–æ–≥ componentWillUnmount)
  return () => {
    console.log('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
  };
}, [dependency]); // –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// useEffect —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º = componentDidMount
useEffect(() => {
  fetchData();
}, []); // –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

// useEffect –±–µ–∑ –º–∞—Å—Å–∏–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
useEffect(() => {
  // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ - –û–°–¢–û–†–û–ñ–ù–û!
});`}
        </pre>
      )}
    </div>
  );

  const renderRoutingSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-purple-600">üõ£Ô∏è React Router</h2>
      
      <div className="bg-purple-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-3">–î–µ–º–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</h3>
        <div className="flex gap-2 mb-4">
          <button 
            onClick={() => navigate('/')}
            className={`px-3 py-1 rounded ${currentRoute === '/' ? 'bg-purple-500 text-white' : 'bg-white'}`}
          >
            –ì–ª–∞–≤–Ω–∞—è
          </button>
          <button 
            onClick={() => navigate('/users')}
            className={`px-3 py-1 rounded ${currentRoute === '/users' ? 'bg-purple-500 text-white' : 'bg-white'}`}
          >
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
          </button>
          <button 
            onClick={() => navigate('/about')}
            className={`px-3 py-1 rounded ${currentRoute === '/about' ? 'bg-purple-500 text-white' : 'bg-white'}`}
          >
            –û –Ω–∞—Å
          </button>
        </div>
        <div className="p-3 bg-white rounded border">
          <strong>–¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç:</strong> {currentRoute}
        </div>
      </div>
      
      <div className="bg-purple-50 p-4 rounded-lg">        
        <button 
          onClick={() => toggleCode('routing')}
          className="flex items-center gap-2 text-purple-600 hover:text-purple-800 mb-4"
        >
          {expandedCode === 'routing' ? <ChevronDown /> : <ChevronRight />}
          –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ —Ä–æ—É—Ç–∏–Ω–≥–∞
        </button>
        
        {expandedCode === 'routing' && (
          <pre className="bg-gray-800 text-green-300 p-4 rounded text-sm overflow-x-auto">
{`// npm install react-router-dom @types/react-router-dom

import { 
  BrowserRouter as Router, 
  Routes, 
  Route, 
  Link, 
  useParams,
  useNavigate 
} from 'react-router-dom';

// –ì–ª–∞–≤–Ω—ã–π App –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function App() {
  return (
    <Router>
      <nav className="navbar">
        <Link to="/" className="nav-link">–ì–ª–∞–≤–Ω–∞—è</Link>
        <Link to="/users" className="nav-link">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</Link>
        <Link to="/about" className="nav-link">–û –Ω–∞—Å</Link>
      </nav>
      
      <main>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/users" element={<UsersPage />} />
          <Route path="/users/:id" element={<UserDetail />} />
          <Route path="/about" element={<AboutPage />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </main>
    </Router>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function UserDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  
  return (
    <div>
      <h2>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {id}</h2>
      <button onClick={() => navigate(-1)}>
        ‚Üê –ù–∞–∑–∞–¥
      </button>
      <button onClick={() => navigate('/users')}>
        –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      </button>
    </div>
  );
}

// –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function SomeComponent() {
  const navigate = useNavigate();
  
  const handleSubmit = () => {
    // –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    navigate('/success'); // —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
  };
}`}
          </pre>
        )}
        
        <div className="mt-4 p-3 bg-white rounded border-l-4 border-purple-400">
          <h4 className="font-semibold">üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:</h4>
          <ul className="list-disc list-inside text-sm space-y-1 mt-2">
            <li><strong>BrowserRouter</strong> - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
            <li><strong>Routes & Route</strong> - –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –º–∞—Ä—à—Ä—É—Ç—ã</li>
            <li><strong>Link</strong> - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>
            <li><strong>useParams</strong> - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL</li>
            <li><strong>useNavigate</strong> - –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è</li>
            <li><strong>Nested routes</strong> - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</li>
          </ul>
        </div>
      </div>
    </div>
  );

  const renderApiSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-orange-600">üîå –†–∞–±–æ—Ç–∞ —Å REST API</h2>
      
      <div className="grid md:grid-cols-2 gap-4">
        <div className="bg-orange-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-3">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {loading && '‚è≥'}</h3>
          <div className="space-y-2">
            {users.map(user => (
              <div key={user.id} className="bg-white p-2 rounded border">
                <div className="font-medium">{user.name}</div>
                <div className="text-sm text-gray-600">{user.email}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-orange-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-3">Todo —Å–ø–∏—Å–æ–∫</h3>
          <div className="space-y-2">
            {todos.map(todo => (
              <div key={todo.id} className="flex items-center gap-2">
                <span className={todo.completed ? 'text-green-600' : 'text-gray-600'}>
                  {todo.completed ? '‚úÖ' : '‚≠ï'}
                </span>
                <span className={todo.completed ? 'line-through text-gray-500' : ''}>
                  {todo.title}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      <button 
        onClick={() => toggleCode('api')}
        className="flex items-center gap-2 text-orange-600 hover:text-orange-800"
      >
        {expandedCode === 'api' ? <ChevronDown /> : <ChevronRight />}
        –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ API
      </button>
      
      {expandedCode === 'api' && (
        <pre className="bg-gray-800 text-green-300 p-4 rounded text-sm overflow-x-auto">
{`// –¢–∏–ø—ã –¥–ª—è TypeScript
interface User {
  id: number;
  name: string;
  email: string;
  username: string;
}

interface ApiError {
  message: string;
  status?: number;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
const fetchUsers = async (): Promise<User[]> => {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/users');
    
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API:', error);
    throw error;
  }
};

// POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const createUser = async (userData: Omit<User, 'id'>): Promise<User> => {
  const response = await fetch('https://jsonplaceholder.typicode.com/users', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(userData),
  });
  
  if (!response.ok) {
    throw new Error('Failed to create user');
  }
  
  return await response.json();
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è API
const useUsers = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadUsers = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const userData = await fetchUsers();
      setUsers(userData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUsers();
  }, []);

  return { users, loading, error, refetch: loadUsers };
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
const UsersComponent: React.FC = () => {
  const { users, loading, error, refetch } = useUsers();

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞: {error}</div>;
  
  return (
    <div>
      <button onClick={refetch}>–û–±–Ω–æ–≤–∏—Ç—å</button>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
};`}
        </pre>
      )}
      
      <div className="bg-orange-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">üõ†Ô∏è –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è API:</h3>
        <ul className="list-disc list-inside text-sm space-y-1">
          <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</strong> - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π response.ok</li>
          <li><strong>Loading states</strong> - –ø–æ–∫–∞–∑—ã–≤–∞–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏</li>
          <li><strong>–¢–∏–ø–∏–∑–∞—Ü–∏—è</strong> - –∏—Å–ø–æ–ª—å–∑—É–π TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã</li>
          <li><strong>–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏</strong> - –≤—ã–Ω–æ—Å–∏ –ª–æ–≥–∏–∫—É API –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö—É–∫–∏</li>
          <li><strong>Abort controller</strong> - –æ—Ç–º–µ–Ω—è–π –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ unmount</li>
        </ul>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeSection) {
      case 'components': return renderComponentsSection();
      case 'state': return renderStateSection();
      case 'routing': return renderRoutingSection();
      case 'api': return renderApiSection();
      default: return renderComponentsSection();
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          React + TypeScript + Vite
        </h1>
        <p className="text-gray-600">–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</p>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º */}
      <div className="flex flex-wrap gap-2 mb-6">
        {sections.map(section => (
          <button
            key={section.id}
            onClick={() => setActiveSection(section.id)}
            className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
              activeSection === section.id
                ? 'bg-blue-500 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            {section.icon}
            {section.title}
          </button>
        ))}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="bg-white rounded-lg border p-6">
        {renderContent()}
      </div>

      {/* –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ */}
      <div className="mt-8 bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg">
        <h3 className="text-lg font-semibold mb-3">üöÄ –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?</h3>
        <p className="text-gray-700 mb-4">
          –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–∞! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω–∏–≤ –≤—Å–µ —ç—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
        </p>
        <div className="text-sm text-gray-600">
          <strong>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</strong> Todo-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π, API –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI
        </div>
      </div>
    </div>
  );
};

export default ReactConceptsGuide;